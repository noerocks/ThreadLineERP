// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  CASHIER
  CUSTOMER
}

enum Category {
  TOPS
  BOTTOMS
  OUTERWEAR
  FOOTWEAR
  ACCESSORIES
}

enum Gender {
  MEN
  WOMEN
  KIDS
  UNISEX
}

enum ProductStatus {
  ACTIVE
  DISCONTINUED
  OUT_OF_STOCK
}

enum PurchaseOrderStatus {
  PENDING
  IN_TRANSIT
  ARRIVED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  role           UserRole  @default(CUSTOMER)
  hashedPassword String?
  image          String?
  address        String?
  contactNumber  String?
  birthday       DateTime?
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id                 String              @id @default(cuid())
  status             ProductStatus
  name               String
  description        String?
  size               String?
  color              String?
  cost               Float               @default(0)
  price              Float               @default(0)
  vatAmount          Float               @default(0)
  stock              Int                 @default(0)
  category           Category
  gender             Gender
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  purchaseOrderItems PurchaseOrderItem[]
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  contactName    String?
  email          String?
  phone          String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id         String              @id @default(cuid())
  supplier   Supplier            @relation(fields: [supplierId], references: [id])
  supplierId String
  status     PurchaseOrderStatus
  address    String
  items      PurchaseOrderItem[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model PurchaseOrderItem {
  id        String        @id @default(cuid())
  order     PurchaseOrder @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product       @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  unitPrice Float
  vatAmount Float
  lineTotal Float
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}
